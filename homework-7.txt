1. A class is a blueprint for creating objects. It defines attributes (properties) and behaviors (methods) that the objects created from the class will have. An object is a stance of a class. When a class is instantiated, an object is created with specific values and behaviors as defined by the class. OOP is a programming paradigm that structures programs around objects and classes rather than functions or logic. The four principles of OOP are encapsulation, abstraction, inheritance, and polymorphism. 

2. Abstract classes define a base class with a common interface but without implementing all the details. An abstract class can have abstract methods requiring subclasses to define them, ensuring consistent behavior across different implementations. Abstract classes are useful when you want to define a template for a group of subclasses, but where each subclass will have its unique implementation for some behaviors.

3. Superglobals are predefined global arrays in PHP that provide access to various types of information. They are accessible anywhere in the script without needing to use global. Some examples include 1. $_GET, which retrieves data sent via URL parameters. 2. $_POST, which accesses data sent via HTTP POST requests. 3. $_SESSION stores and retrieves session variables for a user. 4. $_COOKIE accesses data stored in the user’s cookies. 

4. The two steps of setting up and using a class via namespace are one, defining the namespace. In the class file, declare the namespace at the top. The second is to use the namespace. To utilize the class in another file, import it with the use keyword or reference the full namespace. 

5. MVC is a design pattern used primarily in web development to separate an application into three interconnected components: model, view, and controller. The model manages data and business logic and directly interacts with the database, possesses data, and enforces its rules. View handles presentation layer. It’s responsible for displaying data to the user and rendering the output in a user-friendly format. The controller is an intermediary between the Model and View. It receives user input from the View, processes it, and then updates the View accordingly.

